{"ast":null,"code":"// Configuração da API\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Função para buscar todos os alunos\nexport const getAlunos = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/alunos`);\n    if (!response.ok) {\n      throw new Error('Erro ao buscar alunos');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Erro na API:', error);\n    // Retorna dados mock em caso de erro\n    return getMockAlunos();\n  }\n};\n\n// Função para buscar um aluno específico\nexport const getAluno = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`);\n    if (!response.ok) {\n      throw new Error('Aluno não encontrado');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Erro na API:', error);\n    throw error;\n  }\n};\n\n// Função para criar um novo aluno\nexport const createAluno = async aluno => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/alunos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(aluno)\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao criar aluno');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Erro na API:', error);\n    throw error;\n  }\n};\n\n// Função para atualizar um aluno\nexport const updateAluno = async (id, aluno) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(aluno)\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao atualizar aluno');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Erro na API:', error);\n    throw error;\n  }\n};\n\n// Função para deletar um aluno\nexport const deleteAluno = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao deletar aluno');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Erro na API:', error);\n    throw error;\n  }\n};\n\n// Dados mock para fallback\nconst getMockAlunos = () => {\n  return [{\n    idaluno: 1,\n    nome: 'Ana Beatriz Silva',\n    idade: 20,\n    curso: 'Engenharia de Software',\n    matricula: '2025001',\n    email: 'ana.silva@email.com'\n  }, {\n    idaluno: 2,\n    nome: 'Carlos Eduardo Lima',\n    idade: 22,\n    curso: 'Administração',\n    matricula: '2025002',\n    email: 'carlos.lima@email.com'\n  }, {\n    idaluno: 3,\n    nome: 'Fernanda Rocha',\n    idade: 19,\n    curso: 'Direito',\n    matricula: '2025003',\n    email: 'fernanda.rocha@email.com'\n  }, {\n    idaluno: 4,\n    nome: 'Lucas Almeida',\n    idade: 21,\n    curso: 'Sistemas de Informação',\n    matricula: '2025004',\n    email: 'lucas.almeida@email.com'\n  }, {\n    idaluno: 5,\n    nome: 'Bruno Mendes',\n    idade: 23,\n    curso: 'Arquitetura e Urbanismo',\n    matricula: '2025005',\n    email: 'bruno.mendes@email.com'\n  }];\n};","map":{"version":3,"names":["API_BASE_URL","getAlunos","response","fetch","ok","Error","json","error","console","getMockAlunos","getAluno","id","createAluno","aluno","method","headers","body","JSON","stringify","updateAluno","deleteAluno","idaluno","nome","idade","curso","matricula","email"],"sources":["C:/Users/lucas/OneDrive/Área de Trabalho/trabalho baka/meu-app-react/frontend/src/services/api.js"],"sourcesContent":["// Configuração da API\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Função para buscar todos os alunos\r\nexport const getAlunos = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/alunos`);\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao buscar alunos');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Erro na API:', error);\r\n    // Retorna dados mock em caso de erro\r\n    return getMockAlunos();\r\n  }\r\n};\r\n\r\n// Função para buscar um aluno específico\r\nexport const getAluno = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error('Aluno não encontrado');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Erro na API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para criar um novo aluno\r\nexport const createAluno = async (aluno) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/alunos`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(aluno),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao criar aluno');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Erro na API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para atualizar um aluno\r\nexport const updateAluno = async (id, aluno) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(aluno),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao atualizar aluno');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Erro na API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para deletar um aluno\r\nexport const deleteAluno = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/alunos/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao deletar aluno');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Erro na API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Dados mock para fallback\r\nconst getMockAlunos = () => {\r\n  return [\r\n    {\r\n      idaluno: 1,\r\n      nome: 'Ana Beatriz Silva',\r\n      idade: 20,\r\n      curso: 'Engenharia de Software',\r\n      matricula: '2025001',\r\n      email: 'ana.silva@email.com'\r\n    },\r\n    {\r\n      idaluno: 2,\r\n      nome: 'Carlos Eduardo Lima',\r\n      idade: 22,\r\n      curso: 'Administração',\r\n      matricula: '2025002',\r\n      email: 'carlos.lima@email.com'\r\n    },\r\n    {\r\n      idaluno: 3,\r\n      nome: 'Fernanda Rocha',\r\n      idade: 19,\r\n      curso: 'Direito',\r\n      matricula: '2025003',\r\n      email: 'fernanda.rocha@email.com'\r\n    },\r\n    {\r\n      idaluno: 4,\r\n      nome: 'Lucas Almeida',\r\n      idade: 21,\r\n      curso: 'Sistemas de Informação',\r\n      matricula: '2025004',\r\n      email: 'lucas.almeida@email.com'\r\n    },\r\n    {\r\n      idaluno: 5,\r\n      nome: 'Bruno Mendes',\r\n      idade: 23,\r\n      curso: 'Arquitetura e Urbanismo',\r\n      matricula: '2025005',\r\n      email: 'bruno.mendes@email.com'\r\n    }\r\n  ];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}